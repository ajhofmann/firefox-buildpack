#!/bin/sh

set -e

BUILD_DIR=$1
CACHE_DIR=$2

# config
VERSION=57.0.4
LANG=en-US
PLATFORM=linux64

VERSION_GECKO=0.20.1

# Buildpack URL
ARCHIVE_NAME=firefox
ARCHIVE_NAME_GECKO=geckodriver
FILE_NAME=${ARCHIVE_NAME}-${VERSION}.tar.bz2
FILE_NAME_GECKO=${ARCHIVE_NAME_GECKO}-v${VERSION_GECKO}-${PLATFORM}.tar.gz
BUILDPACK_FIREFOX_PACKAGE="https://download.mozilla.org/?product=firefox-${VERSION}-SSL&os=${PLATFORM}&lang=${LANG}"
#BUILDPACK_FIREFOX_PACKAGE="https://download.mozilla.org/?product=firefox-60.0.2esr-SSL&os=linux64&lang=en-US"
BUILDPACK_GECKODRIVER_PACKAGE="https://github.com/mozilla/geckodriver/releases/download/v${VERSION_GECKO}/${FILE_NAME_GECKO}"


mkdir -p $CACHE_DIR
if ! [ -e $CACHE_DIR/$FILE_NAME ]; then
  echo "-----> Fetching Firefox package from ${BUILDPACK_FIREFOX_PACKAGE}"
  curl $BUILDPACK_FIREFOX_PACKAGE -L -o $CACHE_DIR/$FILE_NAME
fi

if ! [ -e $CACHE_DIR/$FILE_NAME_GECKO ]; then
  echo "-----> Fetching Geckodriver package from ${BUILDPACK_GECKODRIVER_PACKAGE}"
  curl $BUILDPACK_GECKODRIVER_PACKAGE -L -o $CACHE_DIR/$FILE_NAME_GECKO
fi

echo "-----> Extracting Firefox binaries to ${BUILD_DIR}/vendor/${ARCHIVE_NAME}"
mkdir -p $CACHE_DIR/$ARCHIVE_NAME
mkdir -p $BUILD_DIR/vendor
tar jxf $CACHE_DIR/$FILE_NAME -C $CACHE_DIR
mv $CACHE_DIR/$ARCHIVE_NAME $BUILD_DIR/vendor/


echo "-----> Extracting Geckodriver binaries to ${BUILD_DIR}/vendor/${ARCHIVE_NAME_GECKO}"
mkdir -p $CACHE_DIR/$ARCHIVE_NAME_GECKO
mkdir -p $BUILD_DIR/vendor/$ARCHIVE_NAME_GECKO
tar -xzf $CACHE_DIR/$FILE_NAME_GECKO -C $CACHE_DIR
mv $CACHE_DIR/$ARCHIVE_NAME_GECKO $BUILD_DIR/vendor/$ARCHIVE_NAME_GECKO/

echo "----> Getting gtk3.0"
APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

apt-get $APT_OPTIONS update | indent

for PACKAGE in $PACKAGES; do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    topic "Fetching $PACKAGE"
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    topic "Fetching .debs for $PACKAGE"
    apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE | indent
  fi
done
mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$BUILD_DIR/.apt/usr/include/x86_64-linux-gnu:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"


echo "----> Setting paths"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_paths.sh
export PATH="\$BUILD_DIR/vendor/firefox:\$BUILD_DIR/vendor/geckodriver:\$PATH"
export LD_LIBRARY_PATH="\$BUILD_DIR/vendor/firefox:\$BUILD_DIR/vendor/geckodriver:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$BUILD_DIR/vendor/firefox:\$BUILD_DIR/vendor/geckodriver:\$LIBRARY_PATH"
export TMPDIR="\$BUILD_DIR/tmp"
EOF
